<template>
    <view class="content"> 
	<main-head class="bg-main flex-row align-center justify-between" :style="headStyle" :isBack="true">
		<block slot="logImg"> 
			<view class="round bg-white flex justify-center align-center margin-left-sm" style="color: #72b9ea; width: 80upx; height: 80upx; background-color: #f9f9f9; " v-if="UserInfo == '' || UserInfo == undefined || UserInfo == null">
				<text style="font-size: 26upx;" class="text-main">登录</text>
			</view>
			<image class="cu-avatar round bg-white " style="margin: 0; width: 80upx; height: 80upx;"  v-if="UserInfo != '' && UserInfo != undefined && UserInfo != null" src="../../static/logo.png"></image>
		</block>
		<block slot="content">
			<view class=" round bg-white flex flex-row align-center" style="height: 60upx; width: 250upx; margin: 0;">
				<icon  type="search" :size="iconSize" class="margin-left-sm text-bold" />
			</view>
		</block>
		<block slot="other">
			<view class="margin-left">
				
			</view>
		</block>
		<block slot="location">
			<view style="font-size: 45upx;" class=" text-white text-bold margin-left-sm  ">
				<text class=""></text>
			</view>
		</block>
		<block slot="location">
			<view @tap="GoIndex"  class=" text-white text-bold margin-left-sm  ">
				<text class="text-white margin-right-sm" style="font-size: 30upx;">查看更多</text>
			</view>
		</block>
	</main-head>
        
		
		<map :style="style" class="map" id="map1" ref="map1" :controls="controls" :scale="scale" :longitude="location.longitude"
            :latitude="location.latitude" :show-location="showLocation" :enable-3D="enable3D" :rotate="rotate" :skew="skew"
            :show-compass="showCompass" :enable-overlooking="enableOverlooking" :enable-zoom="enableZoom"
            :enable-scroll="enableScroll" :enable-rotate="enableRotate" :enable-satellite="enableSatellite"
            :enable-traffic="enableTraffic" :markers="markers" :polyline="polyline" :circles="circles" :polygons="polygons"
            :include-points="includePoints" @tap="maptap" @controltap="oncontroltap" @markertap="onmarkertap"
            @callouttap="oncallouttap" @poitap="onpoitap" @updated="onupdated" @regionchange="onregionchange"></map>

		<button id="btn" hover-class='none' class="btn round bg-main padding" :style="btnStyle">
			<image src="../../static/filt.png" style="width: 40upx; height: 40upx;" class="margin-right-sm"></image>
			<text style="color: #FFFFFF;">筛选</text>
		</button>
		
		


<!--        <scroll-view class="scrollview" scroll-y="true">
            <button class="button" @click="changeScale">changeScale</button>
            <button class="button" @click="changeRotate">changeRotate</button>
            <button class="button" @click="changeSkew">skew</button>
            <button class="button" @click="addMarkers">addMarkers</button>
            <button class="button" @click="addPolyline">addPolyline</button>
            <button class="button" @click="addPolygons">addPolygons</button>
            <button class="button" @click="addCircles">addCircles</button>
            <button class="button" @click="includePoint">includePoints</button>
            <button class="button" @click="getCenterLocation">getCenterLocation</button>
            <button class="button" @click="getRegion">getRegion</button>
            <button class="button" @click="translateMarker">translateMarker</button>
        </scroll-view> -->
    </view>
</template>

<script>
    const testMarkers = [{
            id: 0,
            latitude: 39.989631,
            longitude: 116.481018,
            title: '方恒国际 阜通东大街6号',
            zIndex: '1',
            rotate: 0,
            width: 20,
            height: 20,
            anchor: {
                x: 0.5,
                y: 1
            },
            callout: {
                content: '方恒国际 阜通东大街6号',
                color: '#00BFFF',
                fontSize: 10,
                borderRadius: 4,
                borderWidth: 1,
                borderColor: '#333300',
                bgColor: '#CCFF99',
                padding: '5',
                display: 'ALWAYS'
            }
        },
        {
            id: 1,
            latitude: 39.9086920000,
            longitude: 116.3974770000,
            title: '天安门',
            zIndex: '1',
            iconPath: '/static/location.png',
            width: 40,
            height: 40,
            anchor: {
                x: 0.5,
                y: 1
            },
            callout: {
                content: '首都北京\n天安门',
                color: '#00BFFF',
                fontSize: 12,
                borderRadius: 2,
                borderWidth: 0,
                borderColor: '#333300',
                bgColor: '#CCFF11',
                padding: '1',
                display: 'ALWAYS'
            }
        }
    ];
    const testPolyline = [{
            points: [{
                    latitude: 39.925539,
                    longitude: 116.279037
                },
                {
                    latitude: 39.925539,
                    longitude: 116.520285
                }
            ],
            color: '#FFCCFF',
            width: 7,
            dottedLine: true,
            arrowLine: true,
            borderColor: '#000000',
            borderWidth: 2
        },
        {
            points: [{
                    latitude: 39.938698,
                    longitude: 116.275177
                },
                {
                    latitude: 39.966069,
                    longitude: 116.289253
                },
                {
                    latitude: 39.944226,
                    longitude: 116.306076
                },
                {
                    latitude: 39.966069,
                    longitude: 116.322899
                },
                {
                    latitude: 39.938698,
                    longitude: 116.336975
                }
            ],
            color: '#CCFFFF',
            width: 5,
            dottedLine: true,
            arrowLine: true,
            borderColor: '#CC0000',
            borderWidth: 3
        }
    ];
    const testPolygons = [{
            points: [{
                    latitude: 39.781892,
                    longitude: 116.293413
                },
                {
                    latitude: 39.787600,
                    longitude: 116.391842
                },
                {
                    latitude: 39.733187,
                    longitude: 116.417932
                },
                {
                    latitude: 39.704653,
                    longitude: 116.338255
                }
            ],
            fillColor: '#FFCCFF',
            strokeWidth: 3,
            strokeColor: '#CC99CC',
            zIndex: 11
        },
        {
            points: [{
                    latitude: 39.887600,
                    longitude: 116.518932
                },
                {
                    latitude: 39.781892,
                    longitude: 116.518932
                },
                {
                    latitude: 39.781892,
                    longitude: 116.428932
                },
                {
                    latitude: 39.887600,
                    longitude: 116.428932
                }
            ],
            fillColor: '#CCFFFF',
            strokeWidth: 5,
            strokeColor: '#CC0000',
            zIndex: 3
        }
    ];
    const testCircles = [{
            latitude: 39.996441,
            longitude: 116.411146,
            radius: 15000,
            strokeWidth: 5,
            color: '#CCFFFF',
            fillColor: '#CC0000'
        },
        {
            latitude: 40.096441,
            longitude: 116.511146,
            radius: 12000,
            strokeWidth: 3,
            color: '#CCFFFF',
            fillColor: '#FFCCFF'
        },
        {
            latitude: 39.896441,
            longitude: 116.311146,
            radius: 9000,
            strokeWidth: 1,
            color: '#CCFFFF',
            fillColor: '#CC0000'
        }
    ];
    const testIncludePoints = [{
            latitude: 39.989631,
            longitude: 116.481018,
        },
        {
            latitude: 39.9086920000,
            longitude: 116.3974770000,
        }
    ];
    module.exports = {
        data() {
            return {
				iconSize: 16,
				headStyle: null,
				style: null,
				btnStyle: null,
                location: {
                    longitude: 116.3974770000,
                    latitude: 39.9086920000
                },
                controls: [{
                    id: 1,
                    position: {
                        left: 5,
                        top: 180,
                        width: 30,
                        height: 30
                    },
                    iconPath: '/static/logo.png',
                    clickable: true
                }],
                showLocation: false,
                scale: 13,
                showCompass: true,
                enable3D: true,
                enableOverlooking: true,
                enableOverlooking: true,
                enableZoom: true,
                enableScroll: true,
                enableRotate: true,
                enableSatellite: false,
                enableTraffic: false,
                polyline: [],
                markers: [],
                polygons: [],
                circles: [],
                includePoints: [],
                rotate: 0,
                skew: 0
            }
        },
        onLoad() {
			var that = this
			this.SetHeight()
			uni.getSystemInfo({
				success(res) {
					var StatusBar = res.statusBarHeight;
					var CustomBar
					if (res.platform == 'android') {
						CustomBar = res.statusBarHeight + 50;
					} else {
						CustomBar = res.statusBarHeight + 45;
					};
					that.headStyle = `height:${CustomBar}px;padding-top:${StatusBar}px;`
					
				}
			})
		},
        onReady() {
            this.map = uni.createMapContext("map1", this);
        },
        methods: {
			SetHeight(){
				var that = this
				uni.getSystemInfo({
					success(res) {
						var height = res.screenHeight * 0.5
						that.style = `height: ${height}px; `
						var size = res.screenWidth / 750 * 30
						that.iconSize = size
						var btnHeight =  res.screenHeight * 0.5
						var btnWidth = res.screenWidth * 0.5
						var btnMargin = res.screenWidth * 0.25
						that.btnStyle = `box-shadow: none; outline: none; border-width: 0px; position: absolute;  width: ${btnWidth}px; z-index: 9999; top: ${btnHeight}px; margin-left: ${btnMargin}px`
					}
				})
			},
            changeScale() {
                this.scale = this.scale == 9 ? 15 : 9;
            },
            changeRotate() {
                this.rotate = this.rotate == 90 ? 0 : 90;
            },
            changeSkew() {
                this.skew = this.skew == 30 ? 0 : 30;
            },
            enableThreeD(e) {
                this.enable3D = e.detail.value;
            },
            changeShowCompass(e) {
                this.showCompass = e.detail.value;
            },
            changeEnableOverlooking(e) {
                this.enableOverlooking = e.detail.value;
            },
            changeEnableZoom(e) {
                this.enableZoom = e.detail.value;
            },
            changeEnableScroll(e) {
                this.enableScroll = e.detail.value;
            },
            changeEnableRotate(e) {
                this.enableRotate = e.detail.value;
            },
            changeEnableSatellite(e) {
                this.enableSatellite = e.detail.value;
            },
            changeEnableTraffic(e) {
                this.enableTraffic = e.detail.value;
            },
            addMarkers() {
                this.markers = testMarkers;
            },
            addPolyline() {
                this.polyline = testPolyline;
            },
            addPolygons() {
                this.polygons = testPolygons;
            },
            addCircles() {
                this.circles = testCircles;
            },
            includePoint() {
                this.includePoints = testIncludePoints;
            },
            getCenterLocation() {
                this.map.getCenterLocation({
                    success: ret => {
                        uni.showModal({
                            content: JSON.stringify(ret)
                        })
                    }
                })
            },
            getRegion() {
                this.map.getRegion({
                    success: ret => {
                        uni.showModal({
                            content: JSON.stringify(ret)
                        })
                    }
                })
            },
            translateMarker() {
                this.map.translateMarker({
                    markerId: 1,
                    destination: {
                        latitude: 39.989631,
                        longitude: 116.481018
                    },
                    duration: 2000
                }, ret => {
                    uni.showModal({
                        content: JSON.stringify(ret)
                    })
                });
            },
            maptap(e) {
                uni.showModal({
                    content: JSON.stringify(e)
                })
            },
            onmarkertap(e) {
                uni.showModal({
                    content: JSON.stringify(e)
                })
            },
            oncontroltap(e) {
                uni.showModal({
                    content: JSON.stringify(e)
                })
            },
            oncallouttap(e) {
                uni.showModal({
                    content: JSON.stringify(e)
                })
            },
            onupdated(e) {
            },
            onregionchange(e) {
            },
            onpoitap(e) {
                uni.showModal({
                    content: JSON.stringify(e)
                })
            }
        }
    }
</script>

<style>
    .content {
        flex: 1;
        ;
    }

/*    .map { 
        width: 750rpx;
        height: 250px;
        background-color: #f0f0f0;
    } */

    .scrollview {
        flex: 1;
        padding: 10px;
    }

    .list-item {
        flex-direction: row;
        flex-wrap: nowrap;
        align-items: center;
        padding: 5px 0px;
    }

    .list-text {
        flex: 1;
    }

    .button {
        margin-top: 5px;
        margin-bottom: 5px;
    }
	
	.btn::after {
	  border-width: 0;
	}
	
	.btn:hover{
		position: absolute;
		top: 4upx;
		left: 4upx;
		background-color: #333333;
	}
	
/* 	.btn:active{
		
	} */
</style>
